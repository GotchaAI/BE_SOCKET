name: Continuous Deployment

on:
  workflow_run:
    workflows: ["Continuous Integration"]  # CI 완료 시 자동 실행
    types:
      - completed

jobs:
  deploy:
    runs-on: ubuntu-latest

    env:
      IMAGE_NAME: jeongminju45/myapp

    steps:
      # 1. 깃허브 저장소 코드 내려받기
      - name: Checkout code
        uses: actions/checkout@v3

      # 2. CI 단계에서 업로드한 .jar 파일 다운로드
      - name: Download built JAR
        uses: actions/download-artifact@v3
        with:
          name: built-jar

      # 3. JDK 설치 (필요하면 생략 가능, 여기선 Docker build context에 사용될 수도 있음)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: 17
          distribution: temurin

      # 4. 버전 정보 정의 (날짜 기반 태그)
      - name: Set VERSION
        id: set_version
        run: echo "VERSION=$(date +%Y%m%d%H%M%S)" >> $GITHUB_OUTPUT

      # 5. Docker 이미지 빌드 및 푸시 (고유 태그 + latest)
      - name: Build & Push Docker Image
        run: |
          docker build --build-arg JAR_FILE=myapp-0.0.1-SNAPSHOT.jar \
            -t $IMAGE_NAME:${{ steps.set_version.outputs.VERSION }} \
            -t $IMAGE_NAME:latest .
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
          docker push $IMAGE_NAME:${{ steps.set_version.outputs.VERSION }}
          docker push $IMAGE_NAME:latest
        shell: bash

      # 6. EC2로 배포 (고유 태그로 pull + 덮어쓰기)
      - name: Deploy to EC2 via SSH
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USER }}
          key: ${{ secrets.EC2_SSH_KEY }}
          script: |
            IMAGE_TAG=${{ steps.set_version.outputs.VERSION }}
            docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}

            docker-compose down
            docker rmi $IMAGE_NAME:$IMAGE_TAG || true
            docker pull $IMAGE_NAME:$IMAGE_TAG

            # docker-compose.yml에 이미지 태그 동적으로 반영
            sed -i "s|image:.*|image: $IMAGE_NAME:$IMAGE_TAG|" docker-compose.yml

            docker-compose up -d
